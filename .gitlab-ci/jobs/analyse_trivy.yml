analyse_trivy:
  stage: analyze
  image:
    name: aquasec/trivy:0.53.0
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: $NEXUS_USER
    TRIVY_PASSWORD: $NEXUS_PWD
    TRIVY_NON_SSL: "true"
    TRIVY_SERVER: "$TRIVY_SERVER"
    HTTP_PROXY: "http://$PROXY_HOST:$PROXY_PORT"
    HTTPS_PROXY: "http://$PROXY_HOST:$PROXY_PORT"
    NO_PROXY: "gitlab-sml.din.developpement-durable.gouv.fr,localhost,127.0.0.1,0.0.0.0,.dsi.damgm.i2"
  script:
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - |
      cat .trivyignore

      for IMAGE in $TAG_VERSION
        do
        export NAME_APP=$(echo $IMAGE | tr "/" - | tr ":" _)
        time trivy image -d --server $TRIVY_SERVER $IMAGE --timeout 120m --cache-dir .trivycache/ --format template --template "@/contrib/html.tpl" --vuln-type library --output "$NAME_APP-library-scanning-report.html"
        time trivy image -d --server $TRIVY_SERVER $IMAGE --timeout 120m --cache-dir .trivycache/ --format template --template "@/contrib/html.tpl" --vuln-type os --output "$NAME_APP-os-scanning-report.html"
      done
      for IMAGE in $TAG_VERSION
        do
        export NAME_APP=$(echo $IMAGE | tr "/" - | tr ":" _)
        if [[ "$FAIL_TRIVY_CONDITION_LIBRARY" != "" && "$KEEP_RUNNING" != "true" ]]; then
          # Fail on critical vulnerabilities
          time trivy image -d --server $TRIVY_SERVER --exit-code 1 --cache-dir .trivycache/ $FAIL_TRIVY_CONDITION_LIBRARY --no-progress "$IMAGE" --vuln-type library 
        else
          # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
          time trivy image -d --server $TRIVY_SERVER --exit-code 0 --cache-dir .trivycache/ --no-progress "$IMAGE" --vuln-type library
        fi
      done
      for IMAGE in $TAG_VERSION
        do
        export NAME_APP=$(echo $IMAGE | tr "/" - | tr ":" _)
        if [[ "$FAIL_TRIVY_CONDITION_OS" != "" && "$KEEP_RUNNING" != "true" ]]; then
          # Fail on critical vulnerabilities
          time trivy image -d --server $TRIVY_SERVER --exit-code 1 --cache-dir .trivycache/ $FAIL_TRIVY_CONDITION_OS --no-progress "$IMAGE" --vuln-type os
        else
          # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
          time trivy image -d --server $TRIVY_SERVER --exit-code 0 --cache-dir .trivycache/ --no-progress "$IMAGE" --vuln-type os
        fi
      done
      
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    paths:
      - "*.html"
  tags:
    - analyze
